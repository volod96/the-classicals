'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
reated by pubudud on 8/30/17.


var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * This module uses an actual mysql connection to execute a single query
 */
var QueryWorker = function () {
    function QueryWorker() {
        _classCallCheck(this, QueryWorker);
    }

    _createClass(QueryWorker, [{
        key: 'execute',


        /**
         * Final execution of the query is from here
         * Note - parameters are expected to be validated before calling this method
         *
         * @param {Object} conn - mysql connection
         * @param {String} query - final query to execute
         * @param {Array} args - arguments corresponding to the query
         * @returns {Promise} - Rows and Info
         */
        value: function execute(conn, query, args) {
            return new Promise(function (resolve, reject) {
                conn.query(query, args, function (err, rows) {
                    conn.release();
                    if (err) {
                        err.appendDetails('QueryWorker', 'execute', 'QueryHandler syntax issue or processing issue');
                        return reject(err);
                    }
                    return resolve(rows);
                });
            });
        }

        /**
         * Add group concat length constraint to the current session
         *
         * @param {Object} conn - mysql connection
         * @param {Object} options - query execute configurations
         * @return {Promise} <- status
         */

    }, {
        key: 'setSession',
        value: function setSession(conn, options) {
            return new Promise(function (resolve, reject) {

                if (!options.lengthConstraint) {
                    return resolve();
                }

                var MAX_LENGTH = typeof options.lengthConstraint === 'number' ? options.lengthConstraint : constants.GROUP_CONCAT_MAX_LN;

                conn.query('SET SESSION group_concat_max_len=' + MAX_LENGTH, function (err) {
                    if (err) {
                        conn.release();
                        err.appendDetails('QueryWorker', 'setSession', 'Error setting group_concat_max_len to 55555');
                        return reject(err);
                    }
                    return resolve();
                });
            });
        }
    }]);

    return QueryWorker;
}();

exports.default = new QueryWorker();