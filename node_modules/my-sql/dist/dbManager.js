'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
reated by pubudud on 2/25/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _mysql = require('mysql');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Mysql DB Manager which creates sql connection pools and expose methods to fetch them
 */
var DbManager = function () {
    function DbManager() {
        _classCallCheck(this, DbManager);
    }

    _createClass(DbManager, [{
        key: 'init',


        /**
         * Initiate an active session with a default connection pool
         * @param {Object} dbConfig - mysql db configuration
         */
        value: function init(dbConfig) {
            this.pools = {
                default: {
                    default: (0, _mysql.createPool)(dbConfig)
                }
            };
            this.dbConfig = dbConfig;
        }

        /**
         * Get a connection pool given the pool name
         *
         * @param {string} [poolName] - key to identify the pool
         * @param {string} [database] - optional database name if the pool is not in the default db
         * @returns {object} - Requested connection pool
         */

    }, {
        key: 'getConnectionPool',
        value: function getConnectionPool(poolName) {
            var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            if (!poolName) {
                return this.pools[database].default;
            }
            if (!this.pools[database] || !this.pools[database][poolName]) {
                return null;
            }
            return this.pools[database][poolName];
        }

        /**
         * Create new connection Pool
         * @param {string} name - connection pool name
         * @param {number} [size] - connection limit
         * @param {object} [overrideConfig] - optional db config if needed to override the default; possibly for a separate database
         */

    }, {
        key: 'createConnectionPool',
        value: function createConnectionPool(name, size, overrideConfig) {
            var dbConfig = overrideConfig || this.dbConfig;

            dbConfig = _extends({}, dbConfig, {
                connectionLimit: size || dbConfig.connectionLimit
            });

            var database = (overrideConfig || {}).database || 'default';

            if (!this.pools[database]) {
                this.pools[database] = {};
            }

            this.pools[database][name] = (0, _mysql.createPool)(dbConfig);
        }

        /**
         * End the session by terminating all available connection pools
         */

    }, {
        key: 'end',
        value: function end() {
            var _this = this;

            Object.keys(this.pools).forEach(function (dbKey) {
                Object.keys(_this.pools[dbKey]).forEach(function (poolKey) {
                    _this.pools[dbKey][poolKey].end();
                });
            });
        }
    }]);

    return DbManager;
}();

exports.default = new DbManager();