'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by pubudud on 8/30/17.
 */

/**
 * Transaction worker which actually does the query operations
 */
var Worker = function () {
    function Worker() {
        _classCallCheck(this, Worker);
    }

    _createClass(Worker, [{
        key: 'executeOrRollbackLoop',


        /**
         * Executes cycle of a transaction recursively, one by one.
         * Calls a separate method to commit transaction when iterations are over(i.e. All queries have executed)
         * If an error occurs rollback current query execution and end further processing
         *
         * @param {Object} conn - mysql connection
         * @param {Array} queries - {query,args}
         *      @param {string} queries.query - query
         *      @param {Array} queries.args - arguments
         * @param {number} iteration - current iteration(int)
         * @param {Object[]} resultsArray - Rows returned from the current iteration will be appended to this array
         * @returns {Promise} - Transaction results object
         */
        value: function executeOrRollbackLoop(conn, queries, iteration) {
            var _this = this;

            var resultsArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            return new Promise(function (resolve, reject) {
                if (iteration >= queries.length) {
                    return _this.commitTransaction(conn, resultsArray).then(resolve).catch(function (err) {
                        err.appendDetails('MysqlFacade', '_executeOrRollbackLoop', 'Invalid query detected for iteration:' + iteration);
                        return reject(err);
                    });
                }
                // Check validity of the query corresponding to this iteration
                if (!queries[iteration] || !queries[iteration].query) {
                    var err = new Error('Invalid query detected for iteration:' + iteration);
                    err.appendDetails('MysqlFacade', '_executeOrRollbackLoop', 'Invalid query detected for iteration:' + iteration);
                    return reject(err);
                }
                return conn.query(queries[iteration].query, queries[iteration].args || [], function (err, rows) {
                    if (err) {
                        return conn.rollback(function () {
                            err.appendDetails('MysqlFacade', '_executeOrRollbackLoop', '[MySQL]Error executing query');
                            return reject(err);
                        });
                    }
                    // Append the mysql result of current query to results array
                    resultsArray.push({
                        rows: rows
                    });
                    iteration++;
                    return _this.executeOrRollbackLoop(conn, queries, iteration, resultsArray).then(resolve).catch(reject);
                });
            });
        }

        /**
         * Commit transaction and call the callback with the results collected
         *
         * @param {Object} conn - mysql connection
         * @param {Array} results - Final result list of all queries (Array of mysql rows objects)
         * @private
         * @returns {Promise} - Transaction results object
         */

    }, {
        key: 'commitTransaction',
        value: function commitTransaction(conn, results) {
            return new Promise(function (resolve, reject) {
                conn.commit(function (err) {
                    if (err) {
                        return conn.rollback(function () {
                            err.appendDetails('MysqlFacade', '_commitTransaction', 'Error while rolling-back transaction');
                            return reject(err);
                        });
                    }
                    return resolve(results);
                });
            });
        }
    }]);

    return Worker;
}();

exports.default = new Worker();