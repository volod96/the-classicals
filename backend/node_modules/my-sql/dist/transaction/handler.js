'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
reated by pubudud on 8/30/17.


var _worker = require('./worker');

var _worker2 = _interopRequireDefault(_worker);

var _dbManager = require('../dbManager');

var _dbManager2 = _interopRequireDefault(_dbManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Handle the execution of transactions
 */
var TransactionHandler = function () {
    function TransactionHandler() {
        _classCallCheck(this, TransactionHandler);
    }

    _createClass(TransactionHandler, [{
        key: 'executeTransaction',


        /**
         * Execute a transaction with any given number of queries
         *
         * @param {Object} options - transaction options.
         *      @param {string} [options.pool = DEFAULT] - Mysql connection pool type.
         *      @param {Object[]} options.queries - Object array of query and args pairs -> [{query: query, args:args}^n].
         * @returns {Promise} - Transactions results as an object
         */
        value: function executeTransaction(options) {
            return new Promise(function (resolve, reject) {

                var connectionPool = _dbManager2.default.getConnectionPool(options.pool);

                // Check if the specified pool is a valid one
                if (!connectionPool) {
                    var err = new Error('Invalid pool type');
                    err.appendDetails('TransactionHandler', 'executeQuery', 'Pool: ' + options.pool);
                    return reject(err);
                }

                connectionPool.getConnection(function (err, conn) {
                    if (err) {
                        err.appendDetails('TransactionHandler', 'executeTransaction', '[MySQL]Error getting connection from pool');
                        return reject(err);
                    }
                    conn.beginTransaction(function (err) {
                        if (err) {
                            err.appendDetails('TransactionHandler', 'executeTransaction', '[MySQL]Error starting transaction');
                            conn.release();
                            return reject(err);
                        }

                        _worker2.default.executeOrRollbackLoop(conn, options.queries, 0).then(function (results) {
                            conn.release();
                            return resolve(results);
                        }).catch(function (err) {
                            err.appendDetails('TransactionHandler', 'executeTransaction', '[MySQL]Failed to complete transaction');
                            conn.release();
                            return reject(err);
                        });
                    });
                });
            });
        }
    }]);

    return TransactionHandler;
}();

exports.default = new TransactionHandler();